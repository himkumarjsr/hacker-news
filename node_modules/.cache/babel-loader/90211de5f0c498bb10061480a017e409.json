{"ast":null,"code":"var _jsxFileName = \"/Users/himanshukumar/Desktop/hacker-news/src/Components/newsChart.js\";\nimport React, { useRef, useEffect } from 'react';\nimport Chart from 'chart.js';\nimport PropTypes from 'prop-types';\nimport styles from './NewsChart.module.scss';\n\nfunction NewsChart(props) {\n  const {\n    data\n  } = props;\n  const canvasRef = useRef();\n  const chartRef = useRef(); //console.log(props);\n\n  const labels = data.map(item => item.objectID); //console.log(labels);\n\n  const dataSet = data.map(item => item.points); //console.log(dataSet);\n  // initialize the chart\n\n  useEffect(() => {\n    if (canvasRef.current) {\n      chartRef.current = new Chart(canvasRef.current, {\n        type: 'line',\n        data: {\n          labels,\n          datasets: [{\n            backgroundColor: '#2196f2',\n            borderColor: \"#2196f2\",\n            data: dataSet,\n            fill: false,\n            lineTension: 0\n          }]\n        },\n        options: {\n          responsive: true,\n          maintainAspectRatio: false,\n          legend: {\n            display: false\n          },\n          scales: {\n            xAxes: [{\n              scaleLabel: {\n                display: true,\n                labelString: \"News ID\"\n              },\n              gridLines: {\n                display: false\n              },\n              ticks: {\n                padding: -8,\n                autoSkip: false,\n                minRotation: 90\n              }\n            }],\n            yAxes: [{\n              scaleLabel: {\n                display: true,\n                labelString: \"Points\"\n              },\n              gridLines: {\n                display: true,\n                drawTicks: false\n              },\n              ticks: {\n                padding: 10,\n                maxTicksLimit: 5\n              }\n            }]\n          }\n        }\n      });\n    }\n\n    return () => {\n      if (chartRef.current) {\n        chartRef.current.destroy();\n      }\n    };\n  }, [canvasRef, data]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: styles.chart,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"canvas\", {\n    ref: canvasRef,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 13\n    }\n  }));\n}\n\nNewsChart.propTypes = {\n  data: PropTypes.array\n};\nNewsChart.defaultProps = {\n  data: []\n};\nexport default NewsChart;","map":{"version":3,"sources":["/Users/himanshukumar/Desktop/hacker-news/src/Components/newsChart.js"],"names":["React","useRef","useEffect","Chart","PropTypes","styles","NewsChart","props","data","canvasRef","chartRef","labels","map","item","objectID","dataSet","points","current","type","datasets","backgroundColor","borderColor","fill","lineTension","options","responsive","maintainAspectRatio","legend","display","scales","xAxes","scaleLabel","labelString","gridLines","ticks","padding","autoSkip","minRotation","yAxes","drawTicks","maxTicksLimit","destroy","chart","propTypes","array","defaultProps"],"mappings":"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","sourcesContent":["import React, { useRef, useEffect } from 'react';\nimport Chart from 'chart.js';\nimport PropTypes from 'prop-types';\n\nimport styles from './NewsChart.module.scss';\n\nfunction NewsChart(props) {\n    const { data } = props;\n    const canvasRef = useRef();\n    const chartRef = useRef();\n    //console.log(props);\n\n    const labels = data.map(item => item.objectID);\n    //console.log(labels);\n    const dataSet = data.map(item => item.points);\n    //console.log(dataSet);\n\n    // initialize the chart\n    useEffect(() => {\n        if (canvasRef.current) {\n            chartRef.current = new Chart(canvasRef.current, {\n                type: 'line',\n                data: {\n                    labels,\n                    datasets: [{\n                        backgroundColor: '#2196f2',\n                        borderColor: \"#2196f2\",\n                        data: dataSet,\n                        fill: false,\n                        lineTension: 0,\n                    }]\n                },\n                options: {\n                    responsive: true,\n                    maintainAspectRatio: false,\n                    legend: {\n                        display: false\n                    },\n                    scales: {\n                        xAxes: [{\n                            scaleLabel: {\n                                display: true,\n                                labelString: \"News ID\"\n                            },\n                            gridLines: {\n                                display: false\n                            },\n                            ticks: {\n                                padding: -8,\n                                autoSkip: false,\n                                minRotation: 90\n                            }\n                        }],\n                        yAxes: [{\n                            scaleLabel: {\n                                display: true,\n                                labelString: \"Points\"\n                            },\n                            gridLines: {\n                                display: true,\n                                drawTicks: false,\n                            },\n                            ticks: {\n                                padding: 10,\n                                maxTicksLimit: 5,\n                            }\n                        }],\n                    }\n                }\n            });\n        }\n\n        return () => {\n            if (chartRef.current) {\n                chartRef.current.destroy();\n            }\n        };\n    }, [canvasRef, data]);\n\n\n    return (\n        <div className={styles.chart}>\n            <canvas\n                ref={canvasRef}\n            />\n        </div>\n    );\n}\n\nNewsChart.propTypes = {\n    data: PropTypes.array,\n};\n\nNewsChart.defaultProps = {\n    data: [],\n};\n\nexport default NewsChart;\n"]},"metadata":{},"sourceType":"module"}